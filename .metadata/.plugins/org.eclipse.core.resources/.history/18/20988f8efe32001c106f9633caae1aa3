package semillero.pruebasUnitarias;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.hbt.semillero.dto.ComicDTO;
import com.hbt.semillero.enums.EstadoEnum;
import com.hbt.semillero.enums.TematicaEnum;

import junit.framework.Assert;

/**
 * 
 * <b>Descripción:<b> Clase que determina las pruebas unitarias para la creacion
 * de Comics. <b>Caso de Uso:<b> hbt semillero
 * 
 * @author Nicole
 * @version
 */
public class CreacionComicTest {

	private final static Logger log = Logger.getLogger(CreacionComicTest.class);

	/**
	 * Atributo que crea la lista de comics
	 */
	public ArrayList<ComicDTO> arrayListComicDTO = new ArrayList<>();
	
	/**
	 * Atributo que determina la lista de Comics con estado = Activo
	 */
	public ArrayList<ComicDTO> arrayListComicDTOActivos;
	
	/**
	 * Atributo que determina la lista de Comics con estado = Inactivo
	 */
	public ArrayList<ComicDTO> arrayListComicDTOInactivos;

	/**
	 * 
	 * Metodo encargado de enviar mensaje de inicio de pruebas <b>Caso de Uso</b>
	 * 
	 * @author Nicole
	 *
	 */
	@BeforeTest
	public void inicializar() {
		/**
		 * Primero valido si mi lista a llenar está vacía para comenzar a llenar
		 */
		if (arrayListComicDTO.isEmpty()) {
			agregarComics();
		}
		this.arrayListComicDTOActivos = comicsEstadoActivo()();
		this.arrayListComicDTOInactivos = separacionDeComicsInactivos();
		BasicConfigurator.configure();// inicializa el logger con una config basica
		log.info(":::::::::INICIAN PRUEBAS UNITARIAS:::::::::");
	}

	/**
	 * 
	 * Metodo encargado deahiora se lo pongo <b>Caso de Uso</b>
	 * 
	 * @author Nicole
	 *
	 */
	private ArrayList<ComicDTO> comicsEstadoActivo() {
		ArrayList<ComicDTO> lstTemp = new ArrayList<>();
		for (ComicDTO comicDTO : arrayListComicDTO) {
			if (comicDTO.getEstadoEnum() == EstadoEnum.ACTIVO) {
				lstTemp.add(comicDTO);
			}
		}
		return lstTemp;
	}

	/**
	 * no me lase Metodo encargado de <b>Caso de Uso</b>
	 * 
	 * @author Nicole
	 * 
	 * @return
	 */
	private ArrayList<ComicDTO> separacionDeComicsInactivos() {
		ArrayList<ComicDTO> lstTemp = new ArrayList<>();
		for (ComicDTO comicDTO : arrayListComicDTO) {
			if (comicDTO.getEstadoEnum() == EstadoEnum.INACTIVO) {
				lstTemp.add(comicDTO);
			}

		}
		return lstTemp;

	}

	private void agregarComics() {
		/**
		 * Atributo que determina la fecha para la creacion de los comics
		 */
		LocalDate localDate = LocalDate.now();

		/**
		 * Creacion 6de comicDtos inactivos para la realizacion de la prueba unitaria.
		 */
		ComicDTO comicDTO1 = new ComicDTO("01", "comic1", "editorial1", TematicaEnum.AVENTURAS, "coleccion1", 25,
				new BigDecimal(15000000), "autor1", true, localDate, EstadoEnum.INACTIVO, 1000L);
		ComicDTO comicDTO2 = new ComicDTO("02", "comic2", "editorial2", TematicaEnum.BELICO, "coleccion2", 25,
				new BigDecimal(15000000), "autor2", false, localDate, EstadoEnum.INACTIVO, 1000L);
		ComicDTO comicDTO3 = new ComicDTO("03", "comic3", "editorial3", TematicaEnum.DEPORTIVO, "coleccion3", 25,
				new BigDecimal(15000000), "autor3", true, localDate, EstadoEnum.INACTIVO, 1000L);
		ComicDTO comicDTO4 = new ComicDTO("04", "comic4", "editorial4", TematicaEnum.FANTASTICO, "coleccion4", 25,
				new BigDecimal(15000000), "autor4", false, localDate, EstadoEnum.INACTIVO, 1000L);
		ComicDTO comicDTO5 = new ComicDTO("05", "comic5", "editorial5", TematicaEnum.HISTORICO, "coleccion5", 25,
				new BigDecimal(15000000), "autor5", true, localDate, EstadoEnum.INACTIVO, 1000L);
		
		/**
		 * Creacion 4 de comicDtos activos para la realizacion de la prueba unitaria.
		 */
		ComicDTO comicDTO6 = new ComicDTO("06", "comic6", "editorial6", TematicaEnum.AVENTURAS, "coleccion6", 25,
				new BigDecimal(15000000), "autor6", false, localDate, EstadoEnum.INACTIVO, 1000L);
		ComicDTO comicDTO7 = new ComicDTO("07", "comic7", "editorial7", TematicaEnum.AVENTURAS, "coleccion7", 25,
				new BigDecimal(15000000), "autor7", true, localDate, EstadoEnum.ACTIVO, 1000L);
		ComicDTO comicDTO8 = new ComicDTO("08", "comic8", "editorial8", TematicaEnum.DEPORTIVO, "coleccion8", 25,
				new BigDecimal(15000000), "autor8", false, localDate, EstadoEnum.ACTIVO, 1000L);
		ComicDTO comicDTO9 = new ComicDTO("09", "comic9", "editorial9", TematicaEnum.HISTORICO, "coleccion9", 25,
				new BigDecimal(15000000), "autor9", true, localDate, EstadoEnum.ACTIVO, 1000L);
		ComicDTO comicDTO10 = new ComicDTO("10", "comic10", "editorial10", TematicaEnum.CIENCIA_FICCION, "coleccion10",
				25, new BigDecimal(15000000), "autor10", false, localDate, EstadoEnum.ACTIVO, 1000L);

		/**
		 * Añadiendo comics a un array creado para guardarlos.
		 */
		arrayListComicDTO.add(comicDTO1);
		arrayListComicDTO.add(comicDTO2);
		arrayListComicDTO.add(comicDTO3);
		arrayListComicDTO.add(comicDTO4);
		arrayListComicDTO.add(comicDTO5);
		arrayListComicDTO.add(comicDTO6);
		arrayListComicDTO.add(comicDTO7);
		arrayListComicDTO.add(comicDTO8);
		arrayListComicDTO.add(comicDTO9);
		arrayListComicDTO.add(comicDTO10);
	}

	/**
	 * 
	 * Metodo encargado de <b>Caso de Uso</b>
	 * 
	 * @author Nicole
	 *
	 */
	@Test
	public void validarActivos() {

		log.info("Inicia ejecucion del metodo validarActivos()");

		Assert.assertNotNull(arrayListComicDTOActivos);
		for (ComicDTO comicDTO : arrayListComicDTOActivos) {
			if (comicDTO.getEstadoEnum() == EstadoEnum.ACTIVO) {
				System.out.println(comicDTO.toString());
			}
		}

		log.info("Finaliza la ejecucion del metodo validarActivos()");
	}

	@Test
	public void validarInactivos() {

		log.info("Inicia ejecucion del metodo validarInactivos()");
		ArrayList<String> lstTemp = new ArrayList<>();
		
		Assert.assertNotNull(lstTemp);
		try {
			
			for (ComicDTO comicDTO : arrayListComicDTOInactivos) {
				if (comicDTO.getEstadoEnum() == EstadoEnum.INACTIVO) {
					lstTemp.add(comicDTO.getNombre());
				}
			}	
			
			throw new Exception("Se genero una excepcion");				
			
		} catch (Exception e) {
			Assert.assertEquals(e.getMessage(),"Se genero una excepcion");
			System.out.println("Se ha detectado que de " + arrayListComicDTO.size() + " comics se encontraron que "
					+ arrayListComicDTOActivos.size() + " se encuentran activos y " + arrayListComicDTOInactivos.size()
					+ " inactivos. Los comics inactivos son:" + lstTemp.toString());
		}

		log.info("Finaliza la ejecucion del metodo validarInactivos()");
	}

	@AfterTest
	public void finalizaPruebasUnitarias() {
		log.info(":::::::::FINALIZA PRUEBAS UNITARIAS:::::::::");
	}
}
